import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import useSWR, { mutate } from "swr";
import { Button, Card, Stack } from "react-bootstrap";
import React from "react";
import {
  CategoryScale,
  Chart as ChartJS,
  Legend,
  LinearScale,
  LineElement,
  PointElement,
  Title,
  Tooltip,
} from "chart.js";
import { Line } from "react-chartjs-2";
import "bootstrap/dist/css/bootstrap.min.css";
import axios from "axios";

// @ts-ignore
const fetcher = (...args) => fetch(...args).then((res) => res.json());

const stocksApiUrl = "/api/db/stocks";

export default function Home() {
  let { data } = useSWR(stocksApiUrl, fetcher);
  let stocks = data ?? [];

  const addForm = async () => {
    const symbol = prompt("Symbol?");
    if (!symbol) {
      return;
    }
    console.log("addForm", symbol);
    stocks = [...stocks, symbol];
    const res = await axios.post(stocksApiUrl, stocks);
    await mutate(stocksApiUrl);
    console.log(res);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Stocks Selector</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {stocks?.map((symbol) => (
          <SymbolInfo key={symbol} symbol={symbol} stocks={stocks} />
        ))}
        <div
          className="position-fixed"
          style={{ right: "20px", bottom: "20px" }}
        >
          <Button onClick={addForm} size="lg">
            +
          </Button>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

// https://rapidapi.com/apidojo/api/yh-finance
export function SymbolInfo({
  symbol,
  stocks,
}: {
  symbol: string;
  stocks: string[];
}) {
  const { data, error } = useSWR(`/api/get-quotes?symbol=${symbol}`, fetcher);
  const result = data?.quoteResponse?.result[0];

  const del = async (delSymbol: string) => {
    stocks = stocks.filter((x) => x !== delSymbol);
    const res = await axios.post(stocksApiUrl, stocks);
    await mutate(stocksApiUrl);
  };

  return (
    <Card className="my-3">
      <Card.Header>
        <HStack>
          <div>
            <h3>{symbol}</h3>
            <h6>
              {result?.shortName} ${result?.regularMarketPrice} (low: $
              {result?.fiftyTwoWeekLow}{" "}
              <Diff
                now={result?.regularMarketPrice}
                vs={result?.fiftyTwoWeekLow}
              />
              , high: ${result?.fiftyTwoWeekHigh}{" "}
              <Diff
                now={result?.regularMarketPrice}
                vs={result?.fiftyTwoWeekHigh}
              />
              )
            </h6>
          </div>
          <Button onClick={() => del(symbol)} variant="outline-danger">
            Del
          </Button>
        </HStack>
      </Card.Header>
      <Card.Body>
        <SymbolChart symbol={symbol} />
        {/*<details>*/}
        {/*  <summary>JSON</summary>*/}
        {/*  <pre>{JSON.stringify(result, null, 2)}</pre>*/}
        {/*</details>*/}
      </Card.Body>
    </Card>
  );
}

export function SymbolChart({ symbol }: { symbol: string }) {
  const { data, error } = useSWR(`/api/get-chart?symbol=${symbol}`, fetcher);
  const result = data?.chart?.result?.[0];

  return (
    <>
      {result && result.timestamp && <LineChart data={result} />}
      {/*<details>*/}
      {/*  <summary>JSON</summary>*/}
      {/*  <pre>{JSON.stringify(result, null, 2)}</pre>*/}
      {/*</details>*/}
    </>
  );
}

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

export function LineChart({ data }: any) {
  const options = {
    responsive: false,
    maintainAspectRatio: true,
    plugins: {
      legend: {
        position: "top" as const,
      },
      title: {
        display: true,
        text: "Chart.js Line Chart",
      },
    },
    scales: {
      xAxis: {
        // The axis for this scale is determined from the first letter of the id as `'x'`
        // It is recommended to specify `position` and / or `axis` explicitly.
        ticks: {
          // Include a dollar sign in the ticks
          // callback: (value, index, ticks) => "$" + value,
        },
      },
    },
  };

  const labels = data.timestamp.map((x) =>
    new Date(x * 1000).toISOString().substring(0, 10)
  );

  const lineChart = {
    labels,
    datasets: [
      {
        label: "6 months by 1 day",
        data: data.indicators.quote[0].close,
        borderColor: "rgb(255, 99, 132)",
        backgroundColor: "rgba(255, 99, 132, 0.5)",
      },
      // {
      //   label: 'Dataset 2',
      //   data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),
      //   borderColor: 'rgb(53, 162, 235)',
      //   backgroundColor: 'rgba(53, 162, 235, 0.5)',
      // },
    ],
  };

  return <Line options={options} data={lineChart} width={1024} height={350} />;
}

export function Diff({ now, vs }) {
  const diff = now - vs;
  return (
    <span className={diff >= 0 ? "text-success" : "text-danger"}>
      {diff > 0 ? "+" : ""}
      {diff.toFixed(2)}
    </span>
  );
}

export function HStack({ children }) {
  return (
    <Stack className="w-100 justify-content-between flex-row">{children}</Stack>
  );
}
